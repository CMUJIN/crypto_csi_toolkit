name: Auto Crypto CSI Analysis

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */4 * * *'

permissions:
  contents: write

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas numpy matplotlib requests openpyxl pyyaml notion-client

      - name: Create analysis runner
        run: |
          cat > run_analysis.py << 'PY'
          import subprocess, yaml
          from pathlib import Path

          cfg_path = Path("config.yaml")
          if not cfg_path.exists():
              raise FileNotFoundError("Missing config.yaml")

          cfg = yaml.safe_load(cfg_path.read_text())
          symbols = cfg.get("symbols", [])
          analysis = cfg.get("analysis", {})

          for item in symbols:
              symbol = item.get("symbol") or item.get("name")
              freq = item.get("freq") or item.get("timeframe") or "1h"
              start = str(item.get("start", "2025-08-01"))

              if not symbol:
                  raise ValueError(f"Invalid entry in config.yaml: {item}")

              print(f"=== Processing {symbol} ({freq}) ===")

              subprocess.run([
                  "python", "crypto_cdd_fetcher.py",
                  "--symbol", symbol,
                  "--freq", freq,
                  "--start", start,
                  "--out", f"data/Binance_{symbol}_{freq}_{start}_to_latest.csv"
              ], check=True)

              subprocess.run([
                  "python", "crypto_chip_timeline_analysis_PRO_v3.9.1.py",
                  f"data/Binance_{symbol}_{freq}_{start}_to_latest.csv",
                  "--window_strength", str(analysis.get("window_strength", 5)),
                  "--window_zone", str(analysis.get("window_zone", 60)),
                  "--bins_pct", str(analysis.get("bins_pct", 1)),
                  "--beta", str(analysis.get("beta", 0.7)),
                  "--half_life", str(analysis.get("half_life", 10000000)),
                  "--quantile", str(analysis.get("quantile", 0.8)),
                  "--ma_period", str(analysis.get("ma_period", 10)),
                  "--smooth", str(analysis.get("smooth", 3))
              ], check=True)

              print(f"[OK] Finished {symbol} ({freq}) analysis successfully.")
          PY

      - name: Run analysis
        run: |
          mkdir -p data docs
          python run_analysis.py

      - name: Sync results to docs
        run: |
          mkdir -p docs
          cp -r data/* docs/ || true
          ls -lh docs/ || true

      - name: Commit and push results
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "github-actions"
          git add docs/
          git commit -m "Auto update: $(date '+%Y-%m-%d %H:%M')" || echo "No changes"
          git push || echo "No permission to push"

      - name: Upload results to Notion
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
          NOTION_SUMMARY_PAGE_ID: ${{ secrets.NOTION_SUMMARY_PAGE_ID }}
        run: |
          python upload_to_notion.py
